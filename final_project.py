# -*- coding: utf-8 -*-
"""final_project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qn_HWQygPvHA5EqkTanJ7mIIy-btWE25
"""

"""
For our project we will attempt to recreate the dart game “501 Darts”. 
Although there is no visual aspect, the game will be played on a traditional dartboard. 
A human player will face a computer player with different difficulty levels (Easy, Medium, Hard). 
Each player gets to throw three darts per turn and the distance is chosen by the human player (between 5 and 20 feet). 
Each player starts off with 501 points and the objective is to get to 0 before the other player. 
Each dart thrown will earn you a certain number of points and it will be subtracted from 501. 
If you are at 5 points and throw a dart on 15 then it will not count. You must get to zero exactly. 

uses random module 
"""
import random

def section(radius):
  """
  Ethan D. section

  determines what section the dart landed in
  radius = 100 in
  diameter = 200 in
  *up to but not including sections closer to the center

  Inner Bullseye is 2 in long (up to 1 in from center)
  Outer Bullseye is 6 in long (up to 3 in from center)
  First single ring is 30 in long (up to 33 in from center)
  Triple ring is 2 in long (up to 35 in from center)
  Second single ring is 30 in long (up to 65 in from center)
  Double ring is 2 in long (up to 67 in from center) 
  Out of play area is 28 in long (up to 100 in from center)

  Args:
    radius (int): how far away the dart is from the center

  Returns:
    section (str): which section of the dartboard the dart hit
  """
  section = ""
  r = 100
  d = 200

  if radius > 0 and radius <= 1:
    section = "inner bullseye"
  elif radius > 1 and radius <= 3:
    section = "outer bullseye"
  elif radius > 3 and radius <= 33:
    section = "single ring"
  elif radius > 33 and radius <= 35:
    section = "triple ring"
  elif radius > 35 and radius <= 65:
    section = "second single ring"
  elif radius > 65 and radius <= 67:
    section = "double ring"
  elif radius > 67 and radius <= 100:
    section = "out of play"

  return section

def throw_score(section, num):
  """
  James' section
  Assigns a score based on which section of the dartboard the dart landed
  Out of play: no score
  Single ring: 1 x number
  Double ring: 2 x number
  Triple ring: 3 x number
  Outer Bullseye: 25 points
  Inner Bullseye: 50 points

  Args:
    section (str): which section of the dartboard the dart hit

    num (int): which number on the dartboard the dart hit under

  Returns:
    An integer representing the player's score for a given throw

  """
  ib_score = 50
  ob_score = 25
  sr_score = num * 1
  dr_score = num * 2
  tr_score = num * 3
  oop_score = 0

  if section == "inner bullseye":
    return ib_score
  elif section == "outer bullseye":
    return ob_score
  elif section == "single ring":
    return sr_score
  elif section == "double ring":
    return dr_score
  elif section == "triple ring":
    return tr_score
  elif section == "out of play":
    return oop_score

def wind(speed, direction):
  """
  Ike's Section
  The effect of wind on the dart's landing coordinates.

  Args:
    Speed (float or int): The speed with which the air flows.
    Direction (str): The direction in which air flows.

  Returns:
    It returns the section in which dart lands.

  """
  section=""
  if type(speed)==float or type(speed)==int and speed >0:
    section=='outer bullseye'
  elif type(speed)==float or type(speed)==int and speed >10:
    section=='single ring'
  elif type(speed)==float or type(speed)==int and speed >20:
    section=='double ring'
  elif type(speed)==float or type(speed)==int and speed >30:
    section=='triple ring'
  elif type(speed)==float or type(speed)==int and speed >40:
    section =='out of play'
  if direction=='north' or direction=='south' or direction=='east' or direction=='west':
    return section
  else:
    return 'No wind'

class Dart:
  """ Ethan P. Section
  Makes Dart objects

  Additional information:

  Attributes:
    distance (int): distance player wants to throw darts from
    vert_angle (int): vertical angle
    horiz_angle (int): horizontal angle
    power (int): power the player wants to throw at
  """

  def __init__(self, distance, vert_angle, horiz_angle, power):
    """ Ethan P. Section
    Initializes throwing dart attributes
    """
    distance = int(input("Enter the distance you'd like to play Darts from (between 5 and 20 ft, do not put units)"))
    while (distance < 5 or distance > 20) and (isinstance(distance, int) == False):
      print("Invalid distance, please try again")
    else: 
      self.distance = distance
    self.vert_angle = input("Enter the angle (going up and down) you'd like to shoot at: ")
    self.horiz_angle = input("Enter the angle (going side to side) you'd like to shoot at: ")
    self.power = input("Enter the power you'd like to shoot at (Disclaimer: shooting with more power is often less accurate): ")

  def gravity(self):
    """ Ethan P. section
    Accounts for gravity on the dart thrown
    """
    gravity = -385.8 # -9.8 m/s^2 in inches per second
    gravity = (gravity * 1/self.power) # makes it so that more power is "less" affected by gravity
    gravity = gravity * (self.distance * .1) # makes it so that a larger distance has more gravitational effect
    self.y = self.y - gravity # gravity affects x coordinate only

  def shot(self):
    """ Ethan P. section
    Gives back a coordinate of where the dart landed

    """
    self.x = 0
    self.y = 0
    gravity() # changes x coordinate based on gravity
    wind(self.x, self.y) # changes x and y coordinate based on wind
    opt_power = abs((self.distance * 4) - self.power) # optimal power is distance * 4, this checks how close the input power is to the optimal power
    if opt_power > 20: # if the input power isn't within 20 of the optimal power then the dart has a bigger random factor
      rando = rando + 40
    else:
      rando = rando + opt_power
    rando = rando * (1 + (self.distance / 100)) # makes it less accurate if you are further away
    self.x = random.randint(-rando, rando)
    self.y = random.randint(-rando, rando)
    opt_angle = 27 # optimal angle when throwing a dart
    self.y = self.y + (vert_angle - opt_angle) + random.randint(-5, 5) # vertical coordinate is dependent on vertical angle minus the optimal throwing angle (random is for some human error)
    self.x = self.x + horiz.angle + random.randint(-5, 5) # horizontal coordinate is dependent on horizontal angle (random is for some human error)
    point = (self.x, self.y)
    self.point = point

print(throw_score("double ring", 14))

print(section(50))

print(wind(35, "west"))

dart_obj = Dart(10, 20, 30, 40)
print(dart_obj)